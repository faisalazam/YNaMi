<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>pk.lucidxpo</groupId>
	<artifactId>ynami</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>YNaMi</name>
	<description>
        YNaMi -&gt; Why Not Me: Template project to help with future projects.
        It aims to provide a template with web layout, database, database migrations/data patches, auditing,
		HTTPMessagingService, unit/integration/performance/acceptance testing, log rotation, feature toggles,
		security, http->https, controller with basic (and toggleable) http methods, DTO->Entity, actuator,
        classes with proper profiles, common exception handling etc.
    </description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.2</version>
		<relativePath/>
	</parent>

    <organization>
        <name>${organization.name}</name>
        <url>${organization.url}</url>
    </organization>

    <scm>
        <url>${scm.repo.link}</url>
        <connection>scm:git:${scm.repo.link}.git</connection>
        <developerConnection>scm:git:${scm.repo.link}.git</developerConnection>
    </scm>

    <issueManagement>
        <system>GitHub</system>
        <url>${issueManagement.url}</url>
    </issueManagement>

    <ciManagement>
        <system>github-actions</system>
        <url>${ciManagement.url}</url>
    </ciManagement>

    <developers>
        <developer>
            <name>${owner.name}</name>
            <organization>${project.organization.name}</organization>
            <organizationUrl>${organization.url}</organizationUrl>
            <roles>
                <role>developer</role>
            </roles>
            <timezone>GMT</timezone>
        </developer>
    </developers>

	<properties>
        <!--   Setting the versions to use Java 20   -->
        <java.version>20</java.version>
        <maven.compiler.release>20</maven.compiler.release>
        <!--    Setting the encodings to avoid warnings like `Input file encoding has not been set`    -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Used by the 'mvn site' : Site Descriptor -->
        <owner.name>Muhammad Faisal</owner.name>
        <organization.name>LucidXPO</organization.name>
        <owner.twitter.handle>mfa1616</owner.twitter.handle>

        <scm.user.name>faisalazam</scm.user.name>
        <scm.repo.name>YNaMi</scm.repo.name>
        <scm.user.link>https://github.com/${scm.user.name}</scm.user.link>
        <scm.repo.link>${scm.user.link}/${scm.repo.name}</scm.repo.link>

        <organization.url>${scm.user.link}</organization.url>
        <ciManagement.url>${scm.repo.link}/actions</ciManagement.url>
        <issueManagement.url>${scm.repo.link}/issues</issueManagement.url>

        <copy.right.info>
            <![CDATA[CopyrightÂ© 2018 <a href="${organization.url}">${organization.name}</a>. All Rights Reserved.]]></copy.right.info>

        <!--   Setting properties for test profiles   -->
        <skip.unit.tests>false</skip.unit.tests>
        <ignore.test.failures>false</ignore.test.failures>
        <skip.integration.tests>false</skip.integration.tests>
        <skip.cucumber.report.generation>true</skip.cucumber.report.generation>

        <h2.version>2.2.222</h2.version>
        <harlib.version>1.1.3</harlib.version>
        <togglz.version>4.3.0</togglz.version>
        <jquery.version>3.7.0</jquery.version>
        <lombok.version>1.18.28</lombok.version>
        <guava.version>32.1.2-jre</guava.version>
        <xstream.version>1.4.21</xstream.version>
        <selenium.version>4.13.0</selenium.version>
        <podam.version>8.0.0.RELEASE</podam.version>
        <diffutils.version>1.3.0</diffutils.version>
        <bootstrap.version>5.3.1</bootstrap.version>
        <joda-time.version>2.12.5</joda-time.version>
        <junit-bom.version>5.10.0</junit-bom.version>
        <maven-pmd.version>3.21.0</maven-pmd.version>
        <commons-io.version>2.18.0</commons-io.version>
        <flyway-core.version>9.22.0</flyway-core.version>
        <font-awesome.version>6.4.2</font-awesome.version>
        <fluentlenium.version>6.0.0</fluentlenium.version>
        <cucumber-bom.version>7.13.0</cucumber-bom.version>
        <flyway-mysql.version>9.22.0</flyway-mysql.version>
        <commons-lang3.version>3.13.0</commons-lang3.version>
        <jacoco.plugin.version>0.8.10</jacoco.plugin.version>
        <zap.clientapi.version>1.12.0</zap.clientapi.version>
        <jaxb-api.version>2.4.0-b180830.0359</jaxb-api.version>
        <org.reflections.version>0.10.2</org.reflections.version>
        <glassfish.jersey.version>4.0.0-M2</glassfish.jersey.version>
        <javax.activation.version>1.1.1</javax.activation.version>
        <maven-jxr-plugin.version>3.6.0</maven-jxr-plugin.version>
        <persistence.moxy.version>4.0.2</persistence.moxy.version>
        <webdrivermanager.version>5.9.3</webdrivermanager.version>
        <mysql-connector-j.version>8.1.0</mysql-connector-j.version>
        <maven-clean-plugin.version>3.3.1</maven-clean-plugin.version>
        <cucumber-reporting.version>5.7.6</cucumber-reporting.version>
        <maven-site-plugin.version>4.0.0-M9</maven-site-plugin.version>
        <junit-platform-suite.version>1.10.0</junit-platform-suite.version>
        <maven-surefire-plugin.version>3.1.2</maven-surefire-plugin.version>
        <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
        <commons-configuration2.version>2.9.0</commons-configuration2.version>
        <maven-checkstyle-plugin.version>3.6.0</maven-checkstyle-plugin.version>
        <jackson-jaxrs-json-provider.version>2.15.2</jackson-jaxrs-json-provider.version>
        <modelmapper-spring-boot-starter.version>2.3.1</modelmapper-spring-boot-starter.version>
        <maven-project-info-reports-plugin.version>3.8.0</maven-project-info-reports-plugin.version>

        <src.site.directory>src/site</src.site.directory>
        <markdown.directory>markdown</markdown.directory>
        <src.markdown.directory>${src.site.directory}/${markdown.directory}</src.markdown.directory>

        <target.directory>${project.build.directory}</target.directory>
        <target.site.directory>${project.reporting.outputDirectory}</target.site.directory>
        <tests.results.directory>${target.directory}/test-results</tests.results.directory>

        <cucumber.reports.container.directory>
            ${target.site.directory}/cucumber-reports
        </cucumber.reports.container.directory>

        <jacoco.execs.directory>${tests.results.directory}/jacoco-execs</jacoco.execs.directory>
        <jacoco.ut.exec>${jacoco.execs.directory}/ut.exec</jacoco.ut.exec>
        <jacoco.it.exec>${jacoco.execs.directory}/it.exec</jacoco.it.exec>
        <jacoco.merged.exec>${jacoco.execs.directory}/merged.exec</jacoco.merged.exec>
        <jacoco.ut.reporting.directory>${target.site.directory}/jacoco</jacoco.ut.reporting.directory>
        <jacoco.it.reporting.directory>${target.site.directory}/jacoco-it</jacoco.it.reporting.directory>
        <jacoco.merged.reporting.directory>${target.site.directory}/jacoco-merged</jacoco.merged.reporting.directory>

        <unit.tests.results.directory>${tests.results.directory}/unit-tests</unit.tests.results.directory>
        <integration.tests.results.directory>${tests.results.directory}/integration-tests</integration.tests.results.directory>

        <cucumber.reports.directory />
        <surefire.jacoco.exec.file.name.arg />
        <failsafe.jacoco.exec.file.name.arg />
        <spring.datasource.type.jvmArguments />
    </properties>

    <dependencyManagement>
        <!-- To make dependency management easier, we can use the Bill of Materials (BOM), a feature that offers easier
             and safer dependency management. The version of the dependency is mandatory in this section.
             However, outside of the dependencyManagement section, we can now omit the version of our dependencies,
             and Maven will select the correct version of the transitive dependencies from the list of dependencies
             provided in dependencyManagement. We should note that defining a dependency in the dependencyManagement
             section does not add it to the dependency tree of the project, it is used just for lookup reference.
             So, defining the BOM (Bill Of Materials) versions here, so that we don't have to specify the versions
             with individual dependencies -->
        <dependencies>
            <dependency>
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-dependencies-bom</artifactId>
                <version>${selenium.version}</version>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-bom</artifactId>
                <version>${cucumber-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

	<dependencies>
		<!--Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!--Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId> nz.net.ultraq.thymeleaf</groupId>
            <artifactId>thymeleaf-layout-dialect</artifactId>
        </dependency>

		<!--Spring Data JPA provides repository support for the Java Persistence API (JPA) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- MySql -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>${mysql-connector-j.version}</version>
        </dependency>

        <!-- In-memory database to help with testing and development activities -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
        </dependency>

        <!-- Database migrations using Flyway -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway-core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-mysql</artifactId>
            <version>${flyway-mysql.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.flywaydb</groupId>
                    <artifactId>flyway-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Actuator, helps with monitoring our app, gathering metrics, understanding traffic or the state of database  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Adding Feature Toggling support by using Togglz -->
        <dependency>
            <groupId>org.togglz</groupId>
            <artifactId>togglz-spring-boot-starter</artifactId>
            <version>${togglz.version}</version>
        </dependency>

		<!-- Togglz Spring Security -->
		<dependency>
			<groupId>org.togglz</groupId>
			<artifactId>togglz-spring-security</artifactId>
            <version>${togglz.version}</version>
		</dependency>

		<!-- Togglz Admin Console -->
        <dependency>
            <groupId>org.togglz</groupId>
            <artifactId>togglz-console</artifactId>
            <version>${togglz.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.google.guava</groupId>
                    <artifactId>guava</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

		<!-- hot swapping, disable cache for template, enable live reload -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- ModelMapper used for object to object conversion -->
        <dependency>
            <groupId>com.github.rozidan</groupId>
            <artifactId>modelmapper-spring-boot-starter</artifactId>
            <version>${modelmapper-spring-boot-starter.version}</version>
        </dependency>

        <!-- JavaBeans Validation (Bean Validation) is a validation model that can add constraints to the beans
             with annotations placed on fields, methods, or classes. We need 'jakarta.validation-api' for that.
             So if the Bean Validation API (i.e. 'jakarta.validation-api') dependency is available on the classpath,
             then there should be corresponding implementation for this API, otherwise, we'll end with error like below:
             "The Bean Validation API is on the classpath but no implementation could be found",
              hence, adding the 'spring-boot-starter-validation' dependency will take care of all that-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Utilities -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${jaxb-api.version}</version>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${joda-time.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

		<!-- Webjars -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>${jquery.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>${bootstrap.version}</version>
		</dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>font-awesome</artifactId>
            <version>${font-awesome.version}</version>
        </dependency>

		<!-- Following are the dependencies which will be helping us with automated testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.ow2.asm</groupId>
                    <artifactId>asm</artifactId>
                </exclusion>
            </exclusions>
		</dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.thoughtworks.xstream</groupId>
            <artifactId>xstream</artifactId>
            <version>${xstream.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>${org.reflections.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.javassist</groupId>
                    <artifactId>javassist</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- PODAM is a lightweight tool to auto-fill Java POJOs with data. -->
        <dependency>
            <groupId>uk.co.jemos.podam</groupId>
            <artifactId>podam</artifactId>
            <version>${podam.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Web Driver Manager -->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>${webdrivermanager.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.google.guava</groupId>
                    <artifactId>guava</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>commons-io</groupId>
                    <artifactId>commons-io</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>htmlunit-driver</artifactId>
            <version>${selenium.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>commons-io</groupId>
                    <artifactId>commons-io</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>io.opentelemetry</groupId>
                    <artifactId>opentelemetry-api-events</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.opentelemetry</groupId>
                    <artifactId>opentelemetry-semconv</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>io.fluentlenium</groupId>
            <artifactId>fluentlenium-junit-jupiter</artifactId>
            <version>${fluentlenium.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.ow2.asm</groupId>
                    <artifactId>asm</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>commons-io</groupId>
                    <artifactId>commons-io</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.fluentlenium</groupId>
            <artifactId>fluentlenium-cucumber</artifactId>
            <version>${fluentlenium.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit-platform-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <version>${junit-platform-suite.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-spring</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>net.masterthought</groupId>
            <artifactId>cucumber-reporting</artifactId>
            <version>${cucumber-reporting.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>commons-io</groupId>
                    <artifactId>commons-io</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>joda-time</groupId>
                    <artifactId>joda-time</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>commons-configuration</groupId>
                    <artifactId>commons-configuration</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-configuration2</artifactId>
            <version>${commons-configuration2.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.zaproxy</groupId>
            <artifactId>zap-clientapi</artifactId>
            <version>${zap.clientapi.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- HarLib is an open source Java library for the HTTP Archive Specification (HAR) v1.2. -->
        <dependency>
            <groupId>edu.umass.cs.benchlab</groupId>
            <artifactId>harlib</artifactId>
            <version>${harlib.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.googlecode.java-diff-utils</groupId>
            <artifactId>diffutils</artifactId>
            <version>${diffutils.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
            <version>${glassfish.jersey.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <version>${glassfish.jersey.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.javassist</groupId>
                    <artifactId>javassist</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-moxy</artifactId>
            <version>${glassfish.jersey.version}</version>
            <scope>test</scope>
            <exclusions>
                <!-- Not Java 10 compliant -->
                <exclusion>
                    <groupId>org.eclipse.persistence</groupId>
                    <artifactId>org.eclipse.persistence.moxy</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.moxy</artifactId>
            <version>${persistence.moxy.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${jackson-jaxrs-json-provider.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>${javax.activation.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.continuumsecurity</groupId>
            <artifactId>zap-java-api</artifactId>
            <version>2.6.0</version>
            <scope>system</scope>
            <systemPath>${project.build.testSourceDirectory}/penetration/pk/lucidxpo/ynami/lib/zap-java-api-2.6.0.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>net.continuumsecurity</groupId>
            <artifactId>jssylze</artifactId>
            <version>0.2-SNAPSHOT</version>
            <scope>system</scope>
            <systemPath>${project.build.testSourceDirectory}/penetration/pk/lucidxpo/ynami/lib/jssylze-0.2-SNAPSHOT.jar</systemPath>
        </dependency>
        <dependency>
            <groupId>net.continuumsecurity</groupId>
            <artifactId>nessus-java-client</artifactId>
            <version>0.2-SNAPSHOT</version>
            <scope>system</scope>
            <systemPath>${project.build.testSourceDirectory}/penetration/pk/lucidxpo/ynami/lib/nessus-java-client-0.2-SNAPSHOT.jar</systemPath>
        </dependency>
    </dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>${spring.datasource.type.jvmArguments}</jvmArguments>
                </configuration>
			</plugin>

            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>9.22.0</version>
                <configuration>
                    <user>sa</user>
<!--                    <password></password>-->
<!--                    <schemas>-->
<!--                        <schema>YNaMi</schema>-->
<!--                    </schemas>-->
<!--                    &lt;!&ndash; use schemas or url&ndash;&gt;-->
<!--                    <url>jdbc:h2:mem:YNaMi;MODE=MySQL;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;</url>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <test>${tests.to.execute}</test>
                    <skipTests>${skip.unit.tests}</skipTests>
                    <argLine>@{surefire.jacoco.exec.file.name.arg}</argLine>
                    <testFailureIgnore>${ignore.test.failures}</testFailureIgnore>
                    <reportsDirectory>${unit.tests.results.directory}</reportsDirectory>
                    <properties>
                        <!-- Unfortunately Gradle and Surefire does not include enough information to disambiguate
                             between different examples and scenarios. While Cucumber tests can be executed, the results
                             are reported in a <Class Name> - <Method Name> format. As a result only scenario names or
                             example numbers are reported. This can make for hard to read reports.
                             By using cucumber.junit-platform.naming-strategy=long, Cucumber will include the feature
                             name in the scenario name. This makes the test results legible.
                             -->
                        <configurationParameters>
                            cucumber.junit-platform.naming-strategy=long
                        </configurationParameters>
                    </properties>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <argLine>
                        @{failsafe.jacoco.exec.file.name.arg}
                        ${spring.datasource.type.jvmArguments}
                        --add-opens java.base/java.lang=ALL-UNNAMED
                    </argLine>
                    <test>it.pk.lucidxpo.**/*IntegrationTest.class</test>
                    <skipTests>${skip.integration.tests}</skipTests>
                    <testFailureIgnore>${ignore.test.failures}</testFailureIgnore>
                    <reportsDirectory>${integration.tests.results.directory}</reportsDirectory>
                </configuration>
            </plugin>
            <!-- Configuring the maven-surefire-report-plugin plugin here to bind the reporting goals to test phases,
                 so that the tests' reports get generated right after the tests run has finished. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <executions>
                    <execution>
                        <id>unit-tests</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report-only</goal>
                        </goals>
                        <configuration>
                            <reportsDirectories>
                                <reportsDirectories>${unit.tests.results.directory}</reportsDirectories>
                            </reportsDirectories>
                        </configuration>
                    </execution>
                    <execution>
                        <id>integration-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>failsafe-report-only</goal>
                        </goals>
                        <configuration>
                            <reportsDirectories>
                                <reportsDirectories>${integration.tests.results.directory}</reportsDirectories>
                            </reportsDirectories>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.trivago.rta</groupId>
                <artifactId>cluecumber-report-plugin</artifactId>
                <version>2.9.4</version>
                <configuration>
                    <skip>${skip.cucumber.report.generation}</skip>
                    <sourceJsonReportDirectory>${cucumber.reports.container.directory}/${cucumber.reports.directory}/json</sourceJsonReportDirectory>
                    <generatedHtmlReportDirectory>${cucumber.reports.container.directory}/${cucumber.reports.directory}/generated-report</generatedHtmlReportDirectory>
                    <startPage>ALL_SCENARIOS</startPage>
                    <expandStepHooks>true</expandStepHooks>
                    <expandDocStrings>true</expandDocStrings>
                    <expandBeforeAfterHooks>true</expandBeforeAfterHooks>
                    <customPageTitle>Acceptance Tests' Report</customPageTitle>
                    <customParameters>
                        <Custom_Parameter>Test Report</Custom_Parameter>
                        <Custom_URL>https://localhost:8443/ynami</Custom_URL>
                        <_Text>This is the test report for the acceptance testing done using Cucumber</_Text>
                    </customParameters>
                    <!-- Choose between ALL_PAGES/SCENARIO_PAGES. Default value is SCENARIO_PAGES -->
                    <customParametersDisplayMode>ALL_PAGES</customParametersDisplayMode>
                    <customNavigationLinks>
                        <Unit_Test_Report>https://www.google.com</Unit_Test_Report>
                        <Integration_Test_Report>https://www.google.com</Integration_Test_Report>
                    </customNavigationLinks>
                </configuration>
                <executions>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>reporting</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- TODO: There are two/three plugins added for cucumber reporting, try and keep the better one.-->
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>5.7.6</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>test</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>${project.name}</projectName>
                            <skip>${skip.cucumber.report.generation}</skip>
                            <inputDirectory>${cucumber.reports.container.directory}/${cucumber.reports.directory}/json</inputDirectory>
                            <outputDirectory>${cucumber.reports.container.directory}/${cucumber.reports.directory}/generated-report-1</outputDirectory>
                            <jsonFiles>
                                <param>**/*.json</param>
                            </jsonFiles>
                            <mergeFeaturesById>false</mergeFeaturesById>
                            <mergeFeaturesWithRetest>false</mergeFeaturesWithRetest>
                            <!-- optional, set true to fail build on test failures -->
                            <checkBuildResult>false</checkBuildResult>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven-clean-plugin.version}</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${src.site.directory}</directory>
                            <includes>
                                <include>${markdown.directory}/*</include>
                                <include>${markdown.directory}</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <executions>
                    <execution>
                        <!-- Copy the readme files to the site markdown directory so that html pages are generated from them. -->
                        <id>copy-readme</id>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
                            <outputDirectory>${src.markdown.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}</directory>
                                    <includes>
                                        <include>readme/</include>
                                        <include>README.md</include>
                                        <include>src/test/java/ut/pk/lucidxpo/ynami/README.md</include>
                                        <include>src/test/java/it/pk/lucidxpo/ynami/README.md</include>
                                        <include>src/test/java/migration/pk/lucidxpo/ynami/README.md</include>
                                        <include>src/test/java/acceptance/pk/lucidxpo/ynami/README.md</include>
                                        <include>src/test/java/bdd/pk/lucidxpo/ynami/README.md</include>
                                        <include>src/test/java/penetration/pk/lucidxpo/ynami/README.md</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${maven-pmd.version}</version>
            </plugin>

            <plugin>
                <!-- Code coverage plugin. -->
                <!-- This sets up code coverage for the unit tests, the integration tests and the combined coverage of both. -->
                <!-- After running a `mvn clean install`, open `target/site/jacoco-both/index.html` in a browser. -->
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.plugin.version}</version>
                <executions>
                    <execution>
                        <id>before-unit-test-execution</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${jacoco.ut.exec}</destFile>
                            <propertyName>surefire.jacoco.exec.file.name.arg</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>after-unit-test-execution</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.ut.exec}</dataFile>
                            <outputDirectory>${jacoco.ut.reporting.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>before-integration-test-execution</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <destFile>${jacoco.it.exec}</destFile>
                            <propertyName>failsafe.jacoco.exec.file.name.arg</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>after-integration-test-execution</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>report-integration</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.it.exec}</dataFile>
                            <outputDirectory>${jacoco.it.reporting.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>merge-unit-and-integration</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>merge</goal>
                        </goals>
                        <configuration>
                            <fileSets>
                                <fileSet>
                                    <directory>${jacoco.execs.directory}/</directory>
                                    <includes>
                                        <include>*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <destFile>${jacoco.merged.exec}</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-merged-report</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.merged.exec}</dataFile>
                            <outputDirectory>${jacoco.merged.reporting.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <!-- TODO:  The jacoco:check goal is bound to verify, add the checks/thresholds here -->
                </executions>
            </plugin>
        </plugins>
	</build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>${maven-jxr-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${maven-pmd.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <id>unit-tests</id>
                        <configuration>
                            <reportsDirectories>
                                <reportsDirectories>${unit.tests.results.directory}</reportsDirectories>
                            </reportsDirectories>
                        </configuration>
                        <reports>
                            <report>report-only</report>
                        </reports>
                    </reportSet>
                    <reportSet>
                        <id>integration-tests</id>
                        <configuration>
                            <reportsDirectories>
                                <reportsDirectories>${integration.tests.results.directory}</reportsDirectories>
                            </reportsDirectories>
                        </configuration>
                        <reports>
                            <report>failsafe-report-only</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <!--    Start -> This plugin is used to create the report for Code coverage and embed it in the site generated by `mvn site`    -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <configuration>
                            <dataFile>${jacoco.ut.exec}</dataFile>
                        </configuration>
                        <reports>
                            <report>report</report>
                        </reports>
                    </reportSet>
                    <reportSet>
                        <configuration>
                            <dataFile>${jacoco.it.exec}</dataFile>
                        </configuration>
                        <reports>
                            <report>report-integration</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <!--    End -> This plugin is used to create the report for Code coverage and embed it in the site generated by `mvn site`    -->
        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>h2</id>
            <properties>
                <spring.datasource.type.jvmArguments>
                    -Dynami.spring.datasource.profile=h2
                </spring.datasource.type.jvmArguments>
            </properties>
        </profile>
        <profile>
            <id>mysql</id>
            <properties>
                <spring.datasource.type.jvmArguments>
                    -Dynami.spring.datasource.profile=mysql
                </spring.datasource.type.jvmArguments>
            </properties>
        </profile>
        <!-- default profile for running all tests (including integration tests) and used by `mvn test` -->
        <profile>
            <id>all-tests</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <tests.to.execute />
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
            </properties>
        </profile>
        <!-- profile for Unit tests only -->
        <profile>
            <id>ut</id>
            <properties>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <tests.to.execute>ut.pk.lucidxpo.**/*Test.class</tests.to.execute>
            </properties>
        </profile>
        <!--profile for Integration tests only -->
        <profile>
            <id>it</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
            </properties>
        </profile>
        <!--profile for Database Migration tests only -->
        <profile>
            <id>mt</id>
            <properties>
                <jacoco.skip>true</jacoco.skip>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <tests.to.execute>migration.pk.lucidxpo.**/*Test.class</tests.to.execute>
            </properties>
        </profile>
        <!--Both Unit and Database Migration tests combined -->
        <profile>
            <id>umt</id>
            <properties>
                <tests.to.execute>
                    ut.pk.lucidxpo.**/*Test.class,
                    migration.pk.lucidxpo.**/*Test.class
                </tests.to.execute>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
            </properties>
        </profile>
        <!-- Both Unit and Integration tests combined -->
        <profile>
            <id>uit</id>
            <properties>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <tests.to.execute>ut.pk.lucidxpo.**/*Test.class</tests.to.execute>
            </properties>
        </profile>
        <!--profile for Acceptance tests (using Selenium) only -->
        <profile>
            <id>at</id>
            <properties>
                <jacoco.skip>true</jacoco.skip>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <tests.to.execute>acceptance.pk.lucidxpo.**/*Test.class</tests.to.execute>
            </properties>
        </profile>
        <!--profile for BDD tests (using Cucumber) only -->
        <profile>
            <id>bt</id>
            <properties>
                <jacoco.skip>true</jacoco.skip>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <tests.to.execute>bdd.pk.lucidxpo.**/*Test.class</tests.to.execute>
                <cucumber.reports.directory>bdd</cucumber.reports.directory>
                <skip.cucumber.report.generation>false</skip.cucumber.report.generation>
            </properties>
        </profile>
        <!--Both Selenium and Cucumber Acceptance tests combined -->
        <profile>
            <id>abt</id>
            <properties>
                <tests.to.execute>
                    bdd.pk.lucidxpo.**/*Test.class,
                    acceptance.pk.lucidxpo.**/*Test.class
                </tests.to.execute>
                <jacoco.skip>true</jacoco.skip>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <cucumber.reports.directory>bdd</cucumber.reports.directory>
                <skip.cucumber.report.generation>false</skip.cucumber.report.generation>
            </properties>
        </profile>
        <!--profile for Penetration tests only -->
        <profile>
            <id>pt</id>
            <properties>
                <jacoco.skip>true</jacoco.skip>
                <skip.unit.tests>false</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <cucumber.reports.directory>security</cucumber.reports.directory>
                <skip.cucumber.report.generation>false</skip.cucumber.report.generation>
                <tests.to.execute>penetration.pk.lucidxpo.**/*Test.class</tests.to.execute>
            </properties>
        </profile>
        <!-- No test execution required at all -->
        <profile>
            <id>nt</id>
            <properties>
                <skip.unit.tests>true</skip.unit.tests>
                <skip.integration.tests>true</skip.integration.tests>
            </properties>
        </profile>
        <!-- In order to run all tests, just use `mvn test` without specifying any profile -->
    </profiles>
</project>

<!-- run unit tests with report

        rm -rf target/site/ target/surefire-reports/
        mvn surefire:test -Put
        mvn surefire-report:report-only
        mvn site -DgenerateReports=false
        report will be generated in target/site/surefire-report.html
-->

<!-- run integration tests with report
        rm -rf target/site/ target/failsafe-reports/
        mvn failsafe:integration-test -Pit
        mvn surefire-report:failsafe-report-only
        mvn site -DgenerateReports=false
        report will be generated in target/site/failsafe-report.html
-->

<!-- run cucumber/bdd tests with report
        browser=chrome mvn clean test -P bt,h2
        browser=firefox mvn clean test -P bt,h2
        browser=htmlunit mvn clean test -P bt,h2
        browser=chrome headless_mode=true mvn clean test -P bt,h2
        browser=chrome headless_mode=false mvn clean test -P bt,h2
-->

<!--
ConfigFileApplicationListener loads property files
-->