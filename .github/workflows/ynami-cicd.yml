name: 'YNaMi CI/CD'
on: push
env:
  JAVA_VERSION: 20
  MYSQL_VERSION: 8.0
  CHROMIUM_VERSION: 116.0.5845.140-1
  UPLOADED_ARTIFACTS_DIR: 'gh-pages'
  UNIT_TESTS_XMLS_DIR: 'target/test-results/unit-tests/*.xml'
  INTEGRATION_TESTS_XMLS_DIR: 'target/test-results/integration-tests/*.xml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 'Get the latest code from the `${{ github.repository }}` repository'
        uses: actions/checkout@v3
      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
        uses: './.github/actions/install-java'
        with:
          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
      - name: 'Cache Maven packages'
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: 'Compiles the application code'
        run: mvn clean compile test-compile --file pom.xml

  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: 'Get the latest code from the `${{ github.repository }}` repository'
        uses: actions/checkout@v3
      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
        uses: './.github/actions/install-java'
        with:
          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
      - name: 'Run the unit tests'
        run: mvn -Djacoco.haltOnFailure=false clean test -Dmaven.test.failure.ignore=true -P ut --file pom.xml
      - name: 'Report'
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          fail-on-error: true
          reporter: java-junit
          name: 'Unit Tests'' Report'
          path: ${{ env.UNIT_TESTS_XMLS_DIR }}

  migration-tests:
    runs-on: ubuntu-latest

    steps:
      - name: 'Get the latest code from the `${{ github.repository }}` repository'
        uses: actions/checkout@v3
      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
        uses: './.github/actions/install-java'
        with:
          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
      - name: 'Set up MySQL'
        run: sudo systemctl start mysql
      - name: 'MySQL Version'
        run: mysql --version
      - name: 'Run the migration tests'
        run: mvn clean test -Dmaven.test.failure.ignore=true -P mt --file pom.xml
      - name: 'Report'
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          fail-on-error: true
          reporter: java-junit
          name: 'DB Migration Tests'' Report'
          path: ${{ env.UNIT_TESTS_XMLS_DIR }}

#  integration-tests-h2:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: 'Get the latest code from the `${{ github.repository }}` repository'
#        uses: actions/checkout@v3
#      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
#        uses: './.github/actions/install-java'
#        with:
#          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
#      - name: 'Run the integration tests'
#        run: mvn -Djacoco.haltOnFailure=false clean integration-test -Dmaven.test.failure.ignore=true -P it,h2 --file pom.xml
#      - name: 'Report'
#        uses: dorny/test-reporter@v1
#        if: success() || failure()
#        with:
#          fail-on-error: true
#          reporter: java-junit
#          name: 'Integration Tests'' Report (H2)'
#          path: ${{ env.INTEGRATION_TESTS_XMLS_DIR }}
#
#  integration-tests-mysql:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: 'Get the latest code from the `${{ github.repository }}` repository'
#        uses: actions/checkout@v3
#      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
#        uses: './.github/actions/install-java'
#        with:
#          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
#      - name: 'Set up MySQL'
#        run: sudo systemctl start mysql
#      - name: 'MySQL Version'
#        run: mysql --version
#      - name: 'Run the integration tests'
#        run: mvn -Djacoco.haltOnFailure=false clean integration-test -Dmaven.test.failure.ignore=true -P it,mysql --file pom.xml
#      - name: 'Report'
#        uses: dorny/test-reporter@v1
#        if: success() || failure()
#        with:
#          fail-on-error: true
#          reporter: java-junit
#          name: 'Integration Tests'' Report (MySQL)'
#          path: ${{ env.INTEGRATION_TESTS_XMLS_DIR }}

  bdd-cucumber-tests:
    runs-on: ubuntu-latest

    steps:
      - name: 'Get the latest code from the `${{ github.repository }}` repository'
        uses: actions/checkout@v3
      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
        uses: './.github/actions/install-java'
        with:
          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
      - name: 'Set up MySQL'
        run: sudo systemctl start mysql
      - name: 'MySQL Version'
        run: mysql --version


# install the latest version => working and installs 116
#      - name:  Install Google Chrome # Using shell commands to install Google Chrome
#        run: |
#          set -ex
#          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
#          sudo apt install ./google-chrome-stable_current_amd64.deb
#      - name: 'Google Chrome Version'
#        run: google-chrome --version


#
#      - name: Install Google Chrome # Using shell commands to install Google Chrome
#        run: |
#          wget --no-verbose -O /tmp/chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_116.0.5845.140-1_amd64.deb \ && sudo apt install -y /tmp/chrome.deb \ && sudo rm /tmp/chrome.deb
#          cd /tmp/
#          sudo dpkg -i chrome.deb
#      - name: 'Google Chrome Version'
#        run: google-chrome --version
#


      - name: 'Install Google Chrome'
        run: |
          wget https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_116.0.5845.140-1_amd64.deb
          sudo apt install -y ./google-chrome-stable_116.0.5845.140-1_amd64.deb
      - name: 'Google Chrome Version'
        run: google-chrome --version



      - name: 'Run the acceptance-cucumber tests'
        run: browser=chrome headless_mode=true mvn clean test -P bt,mysql --file pom.xml

#  acceptance-selenium-tests:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: 'Get the latest code from the `${{ github.repository }}` repository'
#        uses: actions/checkout@v3
#      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
#        uses: './.github/actions/install-java'
#        with:
#          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
#      - name: 'Run the acceptance-selenium tests'
#        run: mvn clean test -Dmaven.test.failure.ignore=true -P at,h2 --file pom.xml
#      - name: 'Report'
#        uses: dorny/test-reporter@v1
#        if: success() || failure()
#        with:
#          fail-on-error: true
#          reporter: java-junit
#          name: 'Acceptance-Selenium Tests'' Report'
#          path: ${{ env.UNIT_TESTS_XMLS_DIR }}
#
#  penetration-tests:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: 'Get the latest code from the `${{ github.repository }}` repository'
#        uses: actions/checkout@v3
#      - name: 'Set up the Oracle JDK `${{ env.JAVA_VERSION }}`'
#        uses: './.github/actions/install-java'
#        with:
#          JAVA_VERSION_TO_INSTALL: ${{ env.JAVA_VERSION }}
#      - name: 'Run the penetration tests'
#        run: mvn clean test -P pt --file pom.xml

#  upload-artifacts:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: 'Uploads the results to ${{ env.UPLOADED_ARTIFACTS_DIR }} folder'
#        uses: actions/upload-artifact@v3
#        if: success() || failure()
#        with:
#          name: ${{ env.UPLOADED_ARTIFACTS_DIR }} # Name of the folder
#          path: target                            # Path to test results
